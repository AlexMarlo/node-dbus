connection
==========

 conn = dbus.createConnection(options)

   options: 
       stream: if present, used as underliing connection stream
       socket: string, UNIX socket path (including abstractsocket, prefixed with '\0')
       port: num
       host: string - TCP, host defaults to localhost
       busAddress: encoded bus address, format as in http://dbus.freedesktop.org/doc/dbus-specification.html#addresses
       authMethods:
       
    if none set, DBUS_SESSION_BUS_ADDRESS environment variable is used

 conn.send(message) // TODO: better name? "write"? "message"?
    
 events:
       connect - after successfull auth
       message - message received
       error
       end

 server = dbus.createServer(function(dbusConn) {
 }, options).listen(args);


    args: same as net.cteateConnection
    dbusConn: authorised connection
    options: TBD. non-standard auth handlers, timeouts etc. 
      Consider separate set members instead of options, like in node tcp server.maxConnections. Or allow both ways?
 
    events:
       connect
        
  server.close(cb)  

TODO: bubble stream events? pause()/resume()/'drain'? return value from send?


bus
===

higher-level RPC api on top of dbus connection 

    bus = require('dbus-native').createBus(opts);
    bus = require('dbus-native').systemBus();  // same as createBus({socket: '/var/run/dbus/system_bus_socket');
    bus = require('dbus-native').sessionBus();   // same as createBus() or createBus({busAddress: process.env.DBUS_SESSION_BUS_ADDRESS});

    opts - same as with createConnection + additional
        noHello: boolean, if set, don't send initial 'Hello' request

    bus.name  - bus name. Initially unique id, similar to ":1.123"
    bus.register(name) - register connection as name 
    bus.connection - underlying bus connection
    bus.onsignal(name, handler) // better name? "signal"? How to call "send signal" methd? Or just merge with all signals, on('signalname')?

    // TODO optional ES Proxy API?
    iface = bus.getInterface(path, object, interface, callback) - auto-generate interface
    // if no callback, but ES Proxy enabled, return proxy object
    iface.methodname(param, param, pam, pam, callback) - invoke methodname.


    bus.DBus() - return proxy to '/org/freedesktop/DBus' service, same as getInterface('org.freedesktop.DBus', '/org/freedesktop/DBus', 'org.freedesktop.DBus');

    // make it 3-step? getService(path).getObject(name).as(interface) ?

    hal = bus.getService('org.freedesktop.Hal.Manager')
             .getObject('/org/freedesktop/Hal/Manager')
             .as('org.freedesktop.Hal.Manager');
    hal.GetAllDevices(function(err, list) {
       // 'this' object reference:
       // this.signature
       // this.bus
       // this.connection
    });
    hal.on('signalname', function(params) {
    });

    // serving function calls
    myservice = bus.registerService('org.nodejs.sidorares.node-dbus');
    myservice.addObject('path', 'interfaceName', realObject);

    var a = function()



